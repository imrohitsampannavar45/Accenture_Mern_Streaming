SCSS

Directives


 @ - preprocessor - special meaning
Mixin - Repeatable piece of code - Style the web page 


syntax- 
@mixin mixinname(){
    -----------Repeatable piece of code -------------
}

@include - Include the mixin that we have defined

@include mixinname()

Watch flag -- always watch for the changes in the scss file - compiles the code automatically
command to  - sass --watch input.scss style.css

Parameterised Mixin - mixins accepts parameters - use CSS values as mixin parameters

@mixin mixinname($color){
    -----use the parameter using the variable name ---
--------------CSS --

}



@include mixinname(black);



===================================

functions  - SASS 


@function  - Used to perform minor calculations/ logic

@function functionnaame(){
    -----------------block of code -----------
}

functionname()

50px = 50*2 == 100px



==========================================================
Scenario - 1

<div> - developer A - Applied some css properties

<div> - Developer B  - Aleready existing Css Proprties - New CSS

@extend - Inherit the properties from existing CSS selector - New CSS


.common{
    -------CSS --------------

}

#common{
    ---------Css------------
}

.newClass{
    @extend .common;
    @extend #common;

}

 =================================================================================================



 Control Directives

 if(condition){
    ---------CSS --------
 }@else{
    -----------CSS ---------- 
 }



 ============================================
 Color Manipulation Functions 

 black  inverse - white 
 --> invert(white)  = black
 darken(color, amount)
 lighten
 saturate
 opacity
 transparent 


Function	Description
darken($color, $amount)	Makes a color darker by a specified amount.
lighten($color, $amount)	Makes a color lighter by a specified amount.
saturate($color, $amount)	Increases the saturation of a color by a specified amount.
desaturate($color, $amount)	Decreases the saturation of a color by a specified amount.
adjust-hue($color, $degrees)	Changes the hue of a color by a specified number of degrees.
mix($color1, $color2, [$weight])	Mixes two colors together in a weighted average.
invert($color)	Inverts a color.
grayscale($color)	Converts a color to grayscale.
complement($color)	Returns the complement of a color.
rgba($color, $alpha)	Changes the alpha (transparency) channel of a color.
opacify($color, $amount)	Increases the opacity of a color. Also known as fade-in.
transparentize($color, $amount)	Decreases the opacity of a color. Also known as fade-out.
scale-color($color, $red, $green, $blue, $saturation, $lightness, $alpha)	Scales one or more properties of a color proportionally.
change-color($color, $red, $green, $blue, $hue, $saturation, $lightness, $alpha)	Changes one or more properties of a color to specific values.
adjust-color($color, $red, $green, $blue, $hue, $saturation, $lightness, $alpha)	Adjusts one or more properties of a color relative to its current values.




========================================================================================================================

ACTIVITY Objective: Show freshers how to use @extend to create reusable styles.
Task: Create a basic button style and then extend it to make variants for primary, secondary, and success buttons.
Instructions:
Define a base button style with properties like padding, border, and font-size.
Use @extend to create .btn-primary, .btn-secondary, and .btn-success classes with different background colors.
Extension: Add a hover style to the base button that each variant inherits. This teaches them how extensions work with pseudo-classes.